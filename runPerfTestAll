#!/bin/bash
export MOZ_DISABLE_CONTENT_SANDBOX=1

# set -o xtrace

if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then 
	echo "Expected argument ./runPerfTest outputfile_img.txt outputfile_zlib.txt num_iterations [platform=32|64]"; 
	exit 1; 
fi

cd "$(dirname "$0")"

if [[ -f "$1" ]]; then
	echo "$1 already exists"; 
	exit 1; 
fi

if [[ -f "$2" ]]; then
	echo "$2 already exists"; 
	exit 1; 
fi

PINCORE=1
OUTPUTIMG=$1
OUTPUTZLIB=$2
ITERATIONS=$3
Pl="64"

if [[ ! -z "$4" ]]; then
	if [[ "$4" == "32" ]]; then
		Pl="32"
	else
		echo "Unknown platform: $4"
		exit 1
	fi
fi

FFVersionsDir=("../../mozilla_firefox_stock/" "./" "./" "./")
FFVersions=("static" "nacl" "new_nacl_cpp" "new_ps_cpp")

if [ ${#FFVersionsDir[@]} -ne ${#FFVersions[@]} ]; then
	echo "Versions Dir and Versions do not match";
	exit 1;
fi

for (( i = 0; i < ${#FFVersions[@]}; i++ )); do 
	if [[ ! -d "${FFVersionsDir[$i]}firefox_${Pl}bit_optdebug_${FFVersions[$i]}" ]]; then
		echo "Not all firefox versions found: ${FFVersionsDir[$i]}firefox_${Pl}bit_optdebug_${FFVersions[$i]}";
		exit 1;
	fi
done

echo "Starting. Make sure to "
echo "1. Disable scaling first with. sudo cpufreq-set -c 3 --min 2200MHz --max 2200MHz"
echo "2. Run the zlib testing server with node server.js"

#param: outputfile
#param: logfile
function writeTimingLinesToOutput() {
	# Logs are in the format as given below
	#
	# stuff | 1,JPEG_Time,0xf7150598,10,0,0,30,1
	# stuff | 2,JPEG_Time,0xf7150598,33,1,10,35,1
	# stuff | 1,JPEG_Time,0xaaa,31,0,0,40,1
	# stuff | 2,JPEG_Time,0xaaa,40,1,11,50,1
	#
	# where the 6 comma separated columns are 
	# - invocation count for this thread
	# - const string "JPEG_Time"
	# - a unique string for each thread
	# - cumulative time spent in "timed" code
	# - invocation count for scanlines in this thread
	# - cumulative time spent in "timed" scanlines code
	# - cumulative time spent in rendering thread until jpeg destroy
	# - invocation count for all apis in this thread
	# We want the latest time for each thread i.e.
	#
	# stuff | 2,JPEG_Time,0xf7150598,33,1,10,35,1
	# stuff | 2,JPEG_Time,0xaaa,40,1,11,50,1

	for testToRun in "JPEG_Time" "PNG_Time"
	do
		ORIGINALDATA=$(cat "$2")
		DATATOFILTER=$(echo "$ORIGINALDATA" | grep -E "$testToRun" | grep -v "'TOPLINE'" | grep -o '|.*' | sed 's/| //')
		OIFS=$IFS
		IFS=,

		FNINVOCATIONS=0
		FNTIMESPENT=0
		FNALLINVOCATIONS=0
		FNCOREINVOCATIONS=0
		FNCORETIMESPENT=0
		DESTROYTIMESPENT=0
		while [ -n "$DATATOFILTER" ]
		do

			TOPLINE=$(echo "$DATATOFILTER" | sort -r -n | head -1)
			echo "$testToRun TOPLINE: $TOPLINE" >> "$1"
			read -ra PIECES <<<"$TOPLINE"
			FNINVOCATIONS=$((FNINVOCATIONS + PIECES[0]))
			FNTIMESPENT=$((FNTIMESPENT + PIECES[3]))
			FNCOREINVOCATIONS=$((FNCOREINVOCATIONS + PIECES[4]))
			FNCORETIMESPENT=$((FNCORETIMESPENT + PIECES[5]))
			DESTROYTIMESPENT=$((DESTROYTIMESPENT + PIECES[6]))
			FNALLINVOCATIONS=$((FNALLINVOCATIONS + PIECES[7]))
			DATATOFILTER=$(echo "$DATATOFILTER" | grep -v -E "${PIECES[2]}")
		done

		COMMASEPTIME=$(printf "%'.f\n" $((FNTIMESPENT / 25)))
		COMMASEPCORETIME=$(printf "%'.f\n" $((FNCORETIMESPENT / 25)))
		COMMASEPDESTROYTIME=$(printf "%'.f\n" $((DESTROYTIMESPENT / 25)))
		echo "Final $testToRun (for 1 run): inv=$((FNINVOCATIONS / 25)) time=$COMMASEPTIME core_inv=$((FNCOREINVOCATIONS / 25)) core_time=$COMMASEPCORETIME destroy=$COMMASEPDESTROYTIME all_inv=$FNALLINVOCATIONS" >> "$1"
		echo -e "\n" >> "$1"

		IFS=$OIFS
	done
}

# param: outputFile
# param: testName
# param: dir
function runTestImg(){
	SAVEDDIR=$PWD
	cd $3
	rm -f ./testing/mozharness/build/local.json
	rm -f ./talos_output.txt
	#sync && echo 3 | sudo tee /proc/sys/vm/drop_caches
	sleep 5
	taskset -c ${PINCORE} ./mach talos-test --activeTests $2 2>&1 | tee ./talos_output.txt
	cat ./testing/mozharness/build/local.json >> "$1"
	echo -e "\n" >> "$1"
	writeTimingLinesToOutput "$1" "./talos_output.txt"
	echo -e "\nTerminal Output\n" >> "$1"
	cat "./talos_output.txt" >> "$1"
	echo "\n=================================\n" >> "$1"
	rm ./talos_output.txt
	cd $SAVEDDIR
}

# param: outputFile
# param: testName
# param: dir
function runTestZlib(){
	SAVEDDIR=$PWD
	cd $3
	rm -f ./testing/mozharness/build/local.json
	rm -f ./talos_output.txt
	#sync && echo 3 | sudo tee /proc/sys/vm/drop_caches
	sleep 5
	taskset -c ${PINCORE} ./mach talos-test --activeTests $2 2>&1 | tee ./talos_output.txt
	cat ./testing/mozharness/build/local.json >> "$1"
	echo -e "\n" >> "$1"
	echo -e "\nTerminal Output\n" >> "$1"
	cat "./talos_output.txt" >> "$1"
	echo "\n=================================\n" >> "$1"
	rm ./talos_output.txt
	cd $SAVEDDIR
}

for i in `seq 1 ${ITERATIONS}`
do

	echo "Round ${i}" >> "${OUTPUTIMG}"
	echo "Round ${i}" >> "${OUTPUTZLIB}"
	echo "=========" >> "${OUTPUTIMG}"
	echo "=========" >> "${OUTPUTZLIB}"

	for (( j = 0; j < ${#FFVersions[@]}; j++ )); do 
		sleep 2
		cp "${FFVersionsDir[$j]}mozconfig${Pl}_${FFVersions[$j]}" ${FFVersionsDir[$j]}mozconfig
		sleep 2
	
		echo -e "FFBuild-${FFVersions[$j]}\n" >> "${OUTPUTIMG}"
		echo -e "FFBuild-${FFVersions[$j]}\n" >> "${OUTPUTZLIB}"

		runTestImg "${OUTPUTIMG}" "jpeg_page_render" "${FFVersionsDir[$j]}"
		runTestZlib "${OUTPUTZLIB}" "zlib_page_render" "${FFVersionsDir[$j]}"

		echo -e "\n---------------------\n" >> "${OUTPUTIMG}"
		echo -e "\n---------------------\n" >> "${OUTPUTZLIB}"

	done
done

echo "Output results to ${OUTPUTIMG}, ${OUTPUTZLIB}"
cat "${OUTPUTIMG}" | grep -E '(^FFBuild)|("name")|("value")|(Final JPEG_Time)|(Final PNG_Time)' | grep --invert-match "INFO -"
echo -e "\n---------------------\n"
echo -e "\n---------------------\n"
cat "${OUTPUTZLIB}" | grep -E '(^FFBuild)|("name")|("value")|(Final JPEG_Time)|(Final PNG_Time)' | grep --invert-match "INFO -"
