#!/bin/bash
export MOZ_DISABLE_CONTENT_SANDBOX=1

# set -o xtrace

if [ -z "$1" ]; then 
	echo "Expected argument ./runPerfTest output_folder [platform=32|64]"; 
	exit 1; 
fi

if [[ -f "$1" ]]; then
	echo "$1 already exists"; 
	exit 1; 
fi

OUTPUTPATH=$(cd "$(dirname "$1")"; pwd)/$(basename "$1")
mkdir -p ${OUTPUTPATH}
cd "$(dirname "$0")"
PINCORE=1
Pl="64"

if [[ ! -z "$4" ]]; then
	if [[ "$4" == "32" ]]; then
		Pl="32"
	else
		echo "Unknown platform: $4"
		exit 1
	fi
fi

FFVersionsDir=("../../mozilla_firefox_stock/" "./" "./" "./" "./" "./")
FFVersionsSuffix=("_stock" "" "" "" "" "")
FFVersions=("static" "static_buffcopy" "nacl" "new_nacl_cpp" "new_ps_cpp" "new_ps_cpp_mutex")

if [ ${#FFVersionsDir[@]} -ne ${#FFVersions[@]} ]; then
	echo "Versions Dir and Versions do not match";
	exit 1;
fi

if [ ${#FFVersionsSuffix[@]} -ne ${#FFVersions[@]} ]; then
	echo "Versions Suffix and Versions do not match";
	exit 1;
fi

for (( i = 0; i < ${#FFVersions[@]}; i++ )); do 
	if [[ ! -d "${FFVersionsDir[$i]}firefox_${Pl}bit_optdebug_${FFVersions[$i]}" ]]; then
		echo "Not all firefox versions found: ${FFVersionsDir[$i]}firefox_${Pl}bit_optdebug_${FFVersions[$i]}";
		exit 1;
	fi
done

echo "Starting. Make sure to "
echo "1. Disable scaling first with. sudo cpufreq-set -c 3 --min 2200MHz --max 2200MHz"
echo "2. Run the zlib testing server with node server.js"


# param: outputDir/prefix
function runTest(){
	rm -f ./testing/mozharness/build/local.json
	#sync && echo 3 | sudo tee /proc/sys/vm/drop_caches
	sleep 2
	taskset -c ${PINCORE} ./mach talos-test --suite rlbox_test 2>&1 | tee "$1_terminal_output.txt"
	sleep 2
	taskset -c ${PINCORE} ./mach talos-test --suite rlbox_scaling 2>&1 | tee "$1_scaling_terminal_output.txt"
	sleep 2
	mv ./testing/mozharness/build/local.json "$1_page_render.json"
}

SAVEDDIR=$PWD

for (( j = 0; j < ${#FFVersions[@]}; j++ )); do 
	cd ${FFVersionsDir[$j]}
	cp "mozconfig${Pl}_${FFVersions[$j]}" mozconfig
	-pkill -f ProcessSandbox_otherside
	runTest "${OUTPUTPATH}/${FFVersions[$j]}${FFVersionsSuffix[$j]}"
	cd $SAVEDDIR
done

sleep 2

for (( j = 0; j < ${#FFVersions[@]}; j++ )); do 
	./newAnalyzePerf.py "${OUTPUTPATH}/${FFVersions[$j]}${FFVersionsSuffix[$j]}_terminal_output.txt" 2>&1 >> "${OUTPUTPATH}/${FFVersions[$j]}${FFVersionsSuffix[$j]}_terminal_analysis.txt"
	./newAnalyzePerf.py "${OUTPUTPATH}/${FFVersions[$j]}${FFVersionsSuffix[$j]}_scaling_terminal_output.txt" 2>&1 >> "${OUTPUTPATH}/${FFVersions[$j]}${FFVersionsSuffix[$j]}_scaling_terminal_analysis.txt"
done
