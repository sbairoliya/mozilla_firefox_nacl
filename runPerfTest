export MOZ_DISABLE_CONTENT_SANDBOX=1

if [ -z "$1" ]; then 
	echo "Expected argument ./runPerfTest outputfile.txt"; 
	exit 1; 
fi

cd "$(dirname "$0")"

if [[ -f "$1" ]]; then
	echo "$1 already exists"; 
	exit 1; 
fi

Pl="64"

if [[ ! -z "$2" ]]; then
	if [[ "$2" == "32" ]]; then
		Pl="32"
	else
		echo "Unknown platform: $2"
		exit 1
	fi
fi
FFVersions=("static" "static_buffcopy" "nonnacl" "nacl" "ps" "nacl_cpp" "process_cpp")

for i in ${FFVersions[@]}; do
	if [[ ! -d "firefox_${Pl}bit_optdebug_${i}" ]]; then
		echo "Not all firefox versions found: firefox_${Pl}bit_optdebug_${i}";
		exit 1;
	fi
done

echo "Starting. Make sure to disable scaling first with. sudo cpufreq-set -c 3 --min 2200MHz --max 2200MHz"

#param: outputfile
#param: logfile
function writeTimingLinesToOutput() {
	# Logs are in the format as given below
	#
	# stuff | 1,JPEG_Time,0xf7150598,10,0,0,30
	# stuff | 2,JPEG_Time,0xf7150598,33,1,10,35
	# stuff | 1,JPEG_Time,0xaaa,31,0,0,40
	# stuff | 2,JPEG_Time,0xaaa,40,1,11,50
	#
	# where the 5 comma separated columns are 
	# - invocation count for this thread
	# - const string "JPEG_Time"
	# - a unique string for each thread
	# - cumulative time spent in "timed" code
	# - invocation count for scanlines in this thread
	# - cumulative time spent in "timed" scanlines code
	# - cumulative time spent in rendering thread until jpeg destroy
	#
	# We want the latest time for each thread i.e.
	#
	# stuff | 2,JPEG_Time,0xf7150598,33,1,10,35
	# stuff | 2,JPEG_Time,0xaaa,40,1,11,50

	for testToRun in "JPEG_Time" "PNG_Time"
	do
		ORIGINALDATA=$(cat "$2")
		DATATOFILTER=$(echo "$ORIGINALDATA" | grep -E "$testToRun" | grep -v "'TOPLINE'" | grep -o '|.*' | sed 's/| //')
		OIFS=$IFS
		IFS=,

		FNINVOCATIONS=0
		FNTIMESPENT=0
		FNCOREINVOCATIONS=0
		FNCORETIMESPENT=0
		DESTROYTIMESPENT=0
		while [ -n "$DATATOFILTER" ]
		do

			TOPLINE=$(echo "$DATATOFILTER" | sort -r -n | head -1)
			echo "$testToRun TOPLINE: $TOPLINE" >> "$1"
			read -ra PIECES <<<"$TOPLINE"
			FNINVOCATIONS=$((FNINVOCATIONS + PIECES[0]))
			FNTIMESPENT=$((FNTIMESPENT + PIECES[3]))
			FNCOREINVOCATIONS=$((FNCOREINVOCATIONS + PIECES[4]))
			FNCORETIMESPENT=$((FNCORETIMESPENT + PIECES[5]))
			DESTROYTIMESPENT=$((DESTROYTIMESPENT + PIECES[6]))
			DATATOFILTER=$(echo "$DATATOFILTER" | grep -v -E "${PIECES[2]}")
		done

		COMMASEPTIME=$(printf "%'.f\n" $((FNTIMESPENT / 25)))
		COMMASEPCORETIME=$(printf "%'.f\n" $((FNCORETIMESPENT / 25)))
		COMMASEPDESTROYTIME=$(printf "%'.f\n" $((DESTROYTIMESPENT / 25)))
		echo "Final $testToRun (for 1 run): inv=$((FNINVOCATIONS / 25)) time=$COMMASEPTIME core_inv=$((FNCOREINVOCATIONS / 25)) core_time=$COMMASEPCORETIME destroy=$COMMASEPDESTROYTIME" >> "$1"
		echo -e "\n" >> "$1"

		IFS=$OIFS
	done
}

# param: outputFile
# param: testName
function runTest(){
	rm -f ./testing/mozharness/build/local.json
	rm -f ./talos_output.txt
	#sync && echo 3 | sudo tee /proc/sys/vm/drop_caches
	sleep 5
	#we aren't pinning to a core as these are macro benchmarks
	#taskset -c 3
	./mach talos-test --activeTests $2 2>&1 | tee ./talos_output.txt
	cat ./testing/mozharness/build/local.json >> "$1"
	echo -e "\n" >> "$1"
	writeTimingLinesToOutput "$1" "./talos_output.txt"
	echo -e "\nTerminal Output\n" >> "$1"
	cat "./talos_output.txt" >> "$1"
	echo "\n=================================\n" >> "$1"
	rm ./talos_output.txt
}

for i in `seq 1 500`
do

	echo "Round ${i}" >> "$1"
	echo "=========" >> "$1"

	for j in ${FFVersions[@]}; do
		sleep 2
		cp "./mozconfig${Pl}_${j}" ./mozconfig
		sleep 2
	
		echo -e "FFBuild-${j}\n" >> "$1"
		runTest "$1" "jpeg_page_render"
		echo -e "\n---------------------\n" >> "$1"

	done
done

echo "Output results to $1"
cat "$1" | grep -E '(^FFBuild)|("name")|("value")|(Final JPEG_Time)|(Final PNG_Time)' | grep --invert-match "INFO -"
